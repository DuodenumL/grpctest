- method: AddPod
  prepare: for i in {0..6}; do eru-cli pod remove local$i; done || echo ''
  requests:
    name@:
      - local0
      - local1
      - local2
      - local3
      - local4
      - local5
      - local6
    desc@:
      - ''
      - c
      - d
  asserts:
    for_each:
      equals:
        - actual: etcdctl get --print-value-only $ETCD_PREFIX/pod/info/$(jq -r '.name' <<<$req) | jq -r '.name'
          expected: |
            py:
            print(json.loads(env('req'))['name'])
        - actual: jq -r '.name' <<<$resp
          expected: |
            py:
            print(json.loads(env('req'))['name'])
        - actual: jq -r '.desc' <<<$resp
          expected: |
            py:
            print(json.loads(env('req'))['desc'])

- method: AddPod
  prepare: |
    eru-cli node resource --fix automated-test-node-0 || echo ''
    for id in `eru-cli --output json node workloads automated-test-node-0 | jq -r '.[].id'`; do eru-cli workload remove --force $id; done || echo ''
    eru-cli node remove automated-test-node-0 || echo ''
    eru-cli pod remove automated-test-pod || echo ''
  requests:
    name: automated-test-pod
    desc: 'used for automated testing'
  asserts:
    for_each:
      equals:
        - actual: etcdctl get --print-value-only $ETCD_PREFIX/pod/info/$(jq -r '.name' <<<$req) | jq -r '.name'
          expected: |
            py:
            print(json.loads(env('req'))['name'])
        - actual: jq -r '.name' <<<$resp
          expected: |
            py:
            print(json.loads(env('req'))['name'])
        - actual: jq -r '.desc' <<<$resp
          expected: |
            py:
            print(json.loads(env('req'))['desc'])
    after_completion:
      run_success:
        - eru-cli node add --endpoint $DOCKERD_ADDR --nodename automated-test-node-0 automated-test-pod


- method: CreateWorkload
  requests:
    name: zc
    entrypoint:
      name: zc
      command: sleep 1000000
    podname: automated-test-pod
    node_filter:
      includes:
        - automated-test-node-0
    image: bash
    count: 2
    old_resource_opts:
      cpu_quota_limit: 0.1
      cpu_bind: true
      memory_limit: 14000000
  asserts:
    for_each:
      equals:
        - actual: jq -r '.podname' <<<$resp
          expected: jq -r '.podname' <<<$req
        - actual: docker inspect $(jq -r '.id' <<<$resp) | jq -r '.[0].HostConfig.CpusetCpus' | awk -F, '{print NF}'
          expected: echo 1
    after_completion:
      equals:
        - actual: eru-cli -o json workload list | jq length
          expected: echo 2
      run_success:
        - for id in `echo -e $resps | jq '.id'`; do echo $id; done
      run:
        - echo removing workloads
        - for id in `eru-cli --output json node workloads automated-test-node-0 | jq -r '.[] .id'`; do eru-cli workload remove --force $id; done
        - sleep 5 || echo '' # used to wait for the remapping

- method: RemovePod
  prepare: eru-cli node remove automated-test-node-0
  requests:
    name: automated-test-pod
  asserts:
    for_each:
    after_completion: